#!/usr/bin/env sh
#
# Copyright (C) 2020 by Nathan Lovato and contributors
#
# This file is part of GDQuest product packager.
#
# GDQuest product packager is free software: you can redistribute it and/or modify it under the
# terms of the GNU General Public License as published by the Free Software Foundation, either
# version 3 of the License, or (at your option) any later version.
#
# GDQuest product packager is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
# PURPOSE. See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along with GDQuest product
# packager. If not, see <https://www.gnu.org/licenses/>.

# Use semantic versioning with an optional hyphen-separated suffix, e.g. 0.3.2 or 1.0.0-dev
VERSION="0.1.0-dev"

# USER CONFIGURATION
PROJECT_TITLE="My Project Title"
NAME="product_packager"

dir_dist="dist"
dir_content="content"
dir_godot="godot"
dir_project=

# Debug
is_dry_run=1
verbosity=0
test $is_dry_run -ne 0 && verbosity=99

# SOURCING FILES
. ./utils

find_chapter_directories() {
	find $dir_content -maxdepth 1 -mindepth 1 -type d
}

# Finds output files in the $dir_content directory and outputs it to the $dir_dist directory,
# replicating the chapters' structure.
# Warning: use locally, as the function uses 'eval' with 'find' to find files by extensions.
#
# Arguments:
# -- optional list of file extensions like "pdf html mp4" to filter the files to move.
move_output_files() {
	for path_chapter in $(find_chapter_directories); do
		dist_directory=$dir_dist/$(basename "$path_chapter")

		find_patterns=$(test "$@" && echo "$@" | sed -E 's/(\w+)/-iname "*.\1" -o/g' | sed 's/\ -o$//')
		find_command="find $path_chapter -maxdepth 1 -mindepth 1"
		# TODO: Check that this notation works
		test "$find_patterns" && find_command=$find_command" -type f \( $find_patterns \)"
		files=$(eval "$find_command")
		files_string=$(printf "\- %s\n" "${files}")

		echo_debug 1 "Found" "$(echo "$files_string" | wc -l)" "files to copy:\n" "$files_string"
		test $is_dry_run -ne 0 -a -d "$dist_directory" || mkdir -p "$dist_directory"
		test $is_dry_run -ne 0 && mv -v --backup --force "$files" "$dist_directory"
	done
}

videos_render_with_bpsrender() {
	bpsrender --help >/dev/null
	test $? -ne 0 && echo "There was an error running 'bpsrender'.
The program 'bpsrender' must be available on the system PATH variable for this program to work.
For more information, see https://en.wikipedia.org/wiki/PATH_(variable).
Cancelling video rendering." && exit 1

	blend_files=$(find "$dir_content" -mindepth 1 -maxdepth 3 -type f -iname "*.blend")

	count=$(printf "%s\n" "${blend_files}" | wc -l)
	printf "\nRendering %s video projects with 'bpsrender'\n" "$count"

	content_path_length=$(echo "$dir_content" | wc --chars)
	for blend_file in; do
		chapter_directory=$(echo "$blend_file" | cut --characters "$content_path_length"-)
		echo_debug 1 "Rendering file $blend_file"
		test "$is_dry_run" -ne 0 && bpsrender --output "$chapter_directory" -- "$blend_file"
	done
}

# Arguments:
# $@: list of paths to video files
videos_compress_ffmpeg() {
	for path in "$@"; do
		directory=$(dirname "$path")
		file=$(basename "$path")
		name=$(echo "$file" | rev | cut -d. -f2- | rev)
		out_path="$directory"/"$name"'-compressed.mp4'
		ffmpeg -i "$path" -c:a copy -c:v h264_nvenc -preset slow -qp 20 "$out_path"
		echo "$out_path"
	done

}

# Tries to reset git repositories to the master branch.
# Prints information about the process, and the list of repositories the function could not
# checkout.
#
# Arguments:
# $@ - a list of paths to git repositories. They can end up with the `.git` folder, the function
# will automatically normalize the paths.
#
# Flags:
# -s/--short - Only output the list of repositories that could not be checked out.
git_try_checkout_to_master() {

	start_dir=$(pwd)
	is_short_form=0
	case $1 in
	-s | --short)
		is_short_form=1
		shift
		;;
	esac

	# Filter and normalize git dirpaths
	git_directories=$(mktemp)
	for i in "$@"; do
		dir=$(echo "$i" | sed 's/\/\.git.*$//')
		cd "$dir" || continue
		git status >/dev/null || continue
		echo "$dir" >>git_directories
	done

	file_errors=$(mktemp)
	for i in $(cat "$git_directories"); do
		cd "$i" || continue

		status_output=$(git status --porcelain)

		test "$is_short_form" -eq 0 && test "$status_output" = "" || echo "The repository $i is dirty."

		output=$(git checkout master)
		test "$is_short_form" -eq 0 && echo "$output"
		if test $? -gt 0; then
			echo "$i" >>file_errors
		fi
	done

	test "$is_short_form" -eq 0 && printf "\nCouldn't checkout to master in the following repositories:\n"
	cat "$file_errors"
	cd "$start_dir" || exit 1
}

package_godot_projects() {
	directory_godot="$dir_content"/"$dir_godot"
	test -d "$directory_godot" || exit 1

	directory_start=$(pwd)
	directory_export="$directory_godot"/export

	if test "$is_dry_run" -ne 0; then
		cd "$directory_godot" || exit 1
		test -d "$dir_dist" || mkdir "$dir_dist"
		test -d "$directory_export" || mkdir "$directory_export"
	fi

	echo "Copying Godot projects to a temporary directory..."
	to_copy=$(find . -mindepth 1 -maxdepth 1 -not -path "./tutorial" -not -path "./dist" -type d)
	if ! test "$is_dry_run" -ne 0; then
		for i in $to_copy; do
			cp -r "$i" dist
		done
	fi
	echo "Done."

	echo "Removing .import directories..."
	test "$is_dry_run" -ne 0 && rm -rf "$(find . -path dist -type d -name .import)"
	echo "Done."

	# TODO: replace with project name -> to lower, with hyphens, .zip
	archive_name=$(strings_to_filename "$PROJECT_TITLE")".zip"
	test "$is_dry_run" -ne 0 && zip -r "$archive_name" dist/*
	test "$is_dry_run" -ne 0 && mv -v --backup --force "$archive_name" "$dir_dist"

	echo "Removing the $directory_export directory..."
	test "$is_dry_run" -ne 0 && rm -rf "$directory_export"
	echo "Done."

	test "$is_dry_run" -ne 0 && cd "$directory_start" || exit 1
}

echo_help() {
	echo '
	Package products for e-commerce platforms.

	Usage:
	'"$NAME"' $path_to_project [Options]

	Positional arguments, like $path_to_project, must come before option flags.

	Required arguments:

	$path_to_project -- path to your project directory. It must contain $dir_content for the program
	to run. Default: current working directory.

	Options:

	-h/--help             -- Display this help message.
	-o/--output-directory -- Directory path to put the output. Default: '"$dir_dist"'
	-i/--input-directory  -- Directory path into which to search the content. Default: '"$dir_content"'
	'
	exit 0
}

# Parses command line arguments
parse_cli_arguments() {
	dir_project=$1
	shift
	test -d $dir_project || echo "$dir_project does not exist. The program needs a valid project directory path to run. Exiting." && exit 1

	arguments=$(getopt --name "$NAME" -o "h,o:,i:" -l "help,output-directory:,input-directory:" -- "$@")
	eval set -- "$arguments"
	while true; do
		case "$1" in
		-h | --help)
			echo_help
			shift
			;;
		-o | --output-directory)
			dir_dist=$2
			shift 2
			;;
		-i | --input-directory)
			dir_content=$2
			shift 2
			;;
		--)
			shift
			break
			;;
		*)
			echo "Missing arguments. Try '$NAME --help' for more information"
			exit 1
			;;
		esac
	done
}

main() {
	test "$(echo $VERSION | cut -d- -f2)" = "dev" && echo "Warning: this is a development version of the
program. It is not suitable for production use."

	test -d $dir_content || echo "Missing content/ directory, the program doesn't seem to be in a valid project, exiting." && exit 1

	parse_cli_arguments "$@"
	test $? -ne 0 && exit $?

	# set git_repos $(find -mindepth 2 -maxdepth 2 -iname .git | cat | sort)
	# git_checkout_to_master $git_repos

	exit 0
}

main "$@"
exit $?
