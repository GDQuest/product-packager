Import("env")
import scons_helper as helper

helper.success_log("Attempting standard build")

env["BUILD_DIR"] = "build/"
env["DIST_DIR"] = "dist/"
VariantDir(env["BUILD_DIR"], env["src"], duplicate=False)

HTMLBuilder = Builder(action=helper.process_markdown_file_in_place,
        suffix='.html',
        src_suffix='.md',
        single_source=1,
        )

env['BUILDERS']["HTMLBuilder"] = HTMLBuilder

GDBuilder = Builder(action=helper.bundle_godot_project,
        suffix='.zip',
        )

env['BUILDERS']["GDBuilder"] = GDBuilder

ilist = []
for image_path in env["images"]:
    ilist.append(Install(env["BUILD_DIR"] + image_path.relative_to(env["content_folder_path"]).parent.as_posix(), image_path.as_posix()))

vlist = []
for video_path in env["videos"]:
    vlist.append(Install(env["BUILD_DIR"] + video_path.relative_to(env["content_folder_path"]).parent.as_posix(), video_path.as_posix()))

for markdown_path in env["markdown_files"]:
    targ = env["BUILD_DIR"] + markdown_path.relative_to(env["content_folder_path"]).as_posix()
    Install(env["BUILD_DIR"] + markdown_path.relative_to(env["content_folder_path"]).parent.as_posix(), markdown_path.as_posix())
    build_html_file = env.HTMLBuilder(targ)
    env.AddPostAction(build_html_file, Delete(targ))
    for image in ilist:
        Depends(build_html_file, image)
    for video in vlist:
        Depends(build_html_file, video)

for folder in helper.get_godot_folders(env["src"]):
    gd_name = helper.get_godot_filename(folder)
    env.GDBuilder(env["BUILD_DIR"] + gd_name + ".zip", folder + "/project.godot")