import scons_helper as helper
from pathlib import Path
from typing import List

Import("env")

ERROR_SOURCE_DIR_INVALID = 1
ERROR_GIT_VERSION_DONT_MATCH = 2

# Default(["html", "cheatsheet"])
AddOption("--strict", action="store_true", dest="strict")
AddOption("--epub", action="store_true", dest="epub")
AddOption("--cheatsheet", action="store_true", dest="cheatsheet")
AddOption("--mavenseed", action="store_true", dest="mavenseed")

GodotProjectBuilder = Builder(action=helper.bundle_godot_project, suffix=".zip")
env["BUILDERS"]["GodotProjectBuilder"] = GodotProjectBuilder


def validate_source_directory():
    if not helper.is_source_directory_valid(env["src"]):
        helper.print_error(f"{env['src']} is not a valid source directory. Exiting.")
        Exit(ERROR_SOURCE_DIR_INVALID)


def make_strict_mode_checks():
    if not helper.validate_git_version(env["src"]):
        helper.print_error(
            f"The Git version of submodules does not match the required version. Exiting."
        )
        Exit(ERROR_GIT_VERSION_DONT_MATCH)


def set_content_folders():
    env["content_directory"] = Path(env["src"]) / "content"
    env["contents_folders"] = helper.content_introspection(env["src"])


def find_all_content_files():
    """Finds all images, videos, and markdown files to process and stores them
    in environment variables."""

    def glob_extensions(directory: Path, extensions: List[str]) -> List[Path]:
        """Return all files in the given path with an extension in the extension list."""
        results = []
        for extension in extensions:
            results += directory.glob("**/" + extension)
        return results

    env["media_files"] = []
    env["markdown_files"] = []
    for folder in env["contents_folders"]:
        env["media_files"] += glob_extensions(
            folder, ["*.png", "*.jpg", "*.jpeg", "*.svg", "*.gif", "*.mp4"]
        )
        env["markdown_files"] += glob_extensions(folder, ["*.md"])


def package_godot_projects():
    def get_godot_project_name(project_folder: str) -> str:
        """Return the project name from a directory with a project.godot
        file."""
        project_settings = Path(project_folder) / "project.godot"
        prefix = "config/name="
        with open(project_settings, "r") as read_obj:
            for line in read_obj:
                if line.startswith(prefix):
                    return (
                        line.lstrip(prefix)
                        .replace(" ", "_")
                        .replace('"', "")
                        .replace("\n", "")
                    )
        raise Exception("Missing Godot project name")

    for folder in helper.get_godot_folders(env["src"]):
        gd_name = get_godot_project_name(folder)
        env.GodotProjectBuilder(
            env["DIST_DIR"] + gd_name + ".zip", folder + "/project.godot"
        )


validate_source_directory()
if env.GetOption("strict"):
    make_strict_mode_checks()

set_content_folders()
find_all_content_files()

# Make environment variables available to subscripts
Export("env")
if env.GetOption("epub"):
    SConscript("EpubSCsub")
else:
    SConscript("SCsub")

package_godot_projects()
