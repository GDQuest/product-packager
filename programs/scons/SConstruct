import scons_helper as helper
Import("env")

AddOption('--epub', action="store_true", dest="epub")
AddOption('--strict', action="store_true", dest="strict")

GDBuilder = Builder(action=helper.bundle_godot_project, suffix='.zip')

env['BUILDERS']["GDBuilder"] = GDBuilder

if not helper.validate_source_dir(env["src"]):
    helper.print_error("SRC dir invalid (missing content file)")
    Exit(1)

if env.GetOption("strict"):
    if not helper.validate_git_version(env["src"]):
        helper.print_error("GIT version error")
        Exit(1)

env["content_folder_path"] = helper.pathlib.Path(env["src"]) / "content"
env["contents_folders"] = helper.content_introspection(env["src"])

# Gather images
env["images"] = []
for folder in env["contents_folders"]:
    env["images"].extend(
        helper.glob_extensions(folder, ["*.png", "*.jpg", "*.svg", "*.gif"])
    )
# Gather videos
env["videos"] = []
for folder in env["contents_folders"]:
    env["videos"].extend(
        helper.glob_extensions(folder, ["*.mp4", "*.jpg"])
    )
# Gather markdown files
env["markdown_files"] = []
for folder in env["contents_folders"]:
    env["markdown_files"].extend(
        helper.glob_extensions(folder, ["*.md"])
    )

# Make environment variables available to subscripts
Export("env")

if env.GetOption("epub"):
    SConscript("EpubSCsub")
else:
    SConscript("SCsub")

# package godot projects
for folder in helper.get_godot_folders(env["src"]):
    gd_name = helper.get_godot_filename(folder)
    env.GDBuilder(env["DIST_DIR"] + gd_name + ".zip", folder + "/project.godot")
