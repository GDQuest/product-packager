from pathlib import Path

import add_node_icons
import highlight_code as highlighter
import include
import link
import table_of_contents
from scons_helper import print_success, print_error, calculate_target_file_paths
from SCons.Script import Dir, File, Environment, Import, Return

# BEGIN - auto-completion
env = Environment()
# END - auto-completion

Import("env")

env.VariantDir(env["BUILD_DIR"], env["SRC_DIR"], duplicate=False)
env.VariantDir(env["DIST_DIR"], env["SRC_DIR"], duplicate=False)

env.Clean("", [env["DIST_DIR"], env["BUILD_DIR"]])


def process_markdown_file_in_place(
    target: list[File], source: list[File], env: Environment
) -> None:
    """Builds a markdown file into a rendered html file."""
    source_file = Path(str(source[0]))
    content: str = ""
    with open(source_file, "r") as sf:
        content = sf.read()

    if content == "":
        print_error(f"WARNING: Couldn't open file {source_file}")

    content = include.process_document(content, source_file)
    content = link.process_document(content, source_file)
    content = table_of_contents.replace_contents_template(content)
    content = add_node_icons.add_built_in_icons(content)
    content = highlighter.highlight_code_blocks(content)

    with open(source_file, "w") as sf:
        sf.write(content)

    command = [
        env["PRODUCT_PACKAGER_DIR"].File("convert_markdown.py"),
        source_file,
        "--output-directory",
        env["BUILD_DIR"],
    ]
    env.Execute([command])

    command = ["sed", "-Ei", "'s|<figcaption>.+</figcaption>||'", target[0]]
    env.Execute([command])


def prepare_html_dependencies(media_files: list[File]) -> list[File]:
    build_files = calculate_target_file_paths(
        env["BUILD_DIR"], env["CONTENT_DIR"], env["MARKDOWN_FILES"]
    )
    env.InstallAs(build_files, env["MARKDOWN_FILES"])
    build_html_files = env.HTMLBuilder(build_files)

    # TODO: depend only on specific `media_files` instead of everything.
    env.Depends(build_html_files, media_files)
    return env.InstallAs(
        calculate_target_file_paths(env["DIST_DIR"], env["BUILD_DIR"], build_html_files),
        build_html_files,
    )


print_success(f"Building {env['SRC_DIR']} as standalone HTML files.")

HTMLBuilder = env.Builder(
    action=process_markdown_file_in_place,
    suffix=".html",
    src_suffix=".md",
    single_source=1,
)
env["BUILDERS"]["HTMLBuilder"] = HTMLBuilder

media_files = env.InstallAs(
    calculate_target_file_paths(env["BUILD_DIR"], env["CONTENT_DIR"], env["MEDIA_FILES"]),
    env["MEDIA_FILES"],
)
html_files = prepare_html_dependencies(media_files)

if env.GetOption("mavenseed"):
    mavenseed_files = []
    for html_file in html_files:
        target_dir = env["DIST_DIR"].Dir("mavenseed").Dir(html_file.Dir(".").name)
        target_file = target_dir.File(html_file.name)
        command = [
            env["PRODUCT_PACKAGER_DIR"].File("prepare_for_mavenseed.py"),
            "--output-directory",
            target_dir,
            "--overwrite",
            "--",
            "$SOURCE",
        ]
        mavenseed_files += env.Command(
            target=target_file, source=html_file, action=[command]
        )
    Return("mavenseed_files")
