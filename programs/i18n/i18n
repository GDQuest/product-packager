#!/usr/bin/env python3
import re
import shutil
from itertools import chain
from dataclasses import dataclass
from datargs import arg, parse
from pathlib import Path


I18N_DIR: Path = Path("i18n")
LANG: str = "es"
GD_COMMENT_LINE = re.compile(r"^\s*#.*")
PO4A_CONF_FILE: Path = Path("po4a.conf")
PO4A_CONF_TEMPLATE_ENTRY: str = "{file_path} $lang:{relative_path} master:file={1}-{0}"
PATHS_TO_COPY = [".env", "content", "epub_metadata", "SConstruct"]


@dataclass
class Args:
  project_path: Path = arg(positional=True, help="Path to the project's repository.")


def get_godot_project_folder(repo: Path) -> Path:
  return [p.parent.relative_to(repo) for p in repo.rglob("project.godot")][0]


def filter_gd(path: Path) -> bool:
  out = True
  if path.suffix.lower() == ".gd":
    with open(path, "r") as f:
      out = re.search(GD_COMMENT_LINE, f.read()) != None
  return out


def main():
  args = parse(Args)

  project_path = args.project_path
  project_path_i18n = Path("{}-{}".format(project_path, LANG))
  po4a_conf_template: dict = {
    "header": (
      "[po4a_langs] {lang}\n"
      "[po4a_paths] {dir}/$master.pot $lang:{dir}/$master.po\n"
    ),
    "entry": {
      ".md": f"[type:text] {PO4A_CONF_TEMPLATE_ENTRY}",
      ".gd": f"[type:gdscriptcomments] {PO4A_CONF_TEMPLATE_ENTRY}"
    },
    "dirs": {
      ".md": "content",
      ".gd": get_godot_project_folder(project_path)
    }
  }

  for path_to_copy in PATHS_TO_COPY + [po4a_conf_template["dirs"][".gd"]]:
    src: Path = project_path / path_to_copy
    dst: Path = project_path_i18n / path_to_copy
    try:
      if src.is_dir():
        shutil.copytree(src, dst, ignore=shutil.ignore_patterns(*map(lambda e: f"*{e}", po4a_conf_template["entry"])), dirs_exist_ok=True)
      else:
        shutil.copy(src, dst)
    except FileNotFoundError:
      pass

  po4a_strs = map(lambda d: (project_path / po4a_conf_template["dirs"][d]).rglob(f"*{d}"), po4a_conf_template["dirs"])
  po4a_strs = chain(*po4a_strs)
  po4a_strs = filter(filter_gd, po4a_strs)
  po4a_strs = map(lambda p: po4a_conf_template["entry"][p.suffix].format(*p.parts[::-1], file_path=p.resolve(), relative_path=p.relative_to(project_path)), po4a_strs)
  with open(project_path_i18n / PO4A_CONF_FILE, "w") as po4a_conf:
    po4a_conf.write(po4a_conf_template["header"].format(dir=I18N_DIR, lang=LANG) + "\n".join(po4a_strs))


if __name__ == "__main__":
  main()
